}
)
)
rawArray <- R6Class("rawArray",
public = list(
rawData = NULL,
initialize = function(probePath, controlPath){
self$rawData = read.ilmn("0" , "0", path = probePath, ctrlpath = controlPath)
},
rawMicroarray.getData = function(){
return (self$rawData)
}
)
)
rawArray <- R6Class("rawArray",
public = list(
rawData = NULL,
initialize = function(probePath, controlPath){
self$rawData = read.ilmn("0" , "0", path = probePath, ctrlpath = controlPath)
},
rawMicroarray.getData <- function(){
return (self$rawData)
}
)
)
library(tools)
"Progammer: Shane Caldwell
Goal: Functions needed to validate whether use inputted
datasets fit the format necessary to continue on with analysis.
The input object will have an instance of both this and a datamanager"
Validator = R6Class("Validator",
public = list(
validated = FALSE,
PATH <- 0,
NAME <- 1,
TYPE <- 2,
initialize = function(probe, control, target){
probeList   = validate.packer(probe)
controlList = validate.packer(control)
targetList  = validate.packer(target)
acceptableData = validate.delegator(probeList, controlList, targetList)
if (acceptableData){
self$validated = True
}
},
isValid = function(){
return (self$validated)
},
validate.packer = function(uploaded){
toValidate = list(uploaded$datapath)
toValidate = list(toValidate, uploaded$name)
toValidate = list(toValidate, uploaded$type)
return (toValidate)
},
validate.delgator = function(probe, control, targets){
probePass   = validate.probe(probe[self$PATH], probe[self$NAME], probe[self$TYPE])
controlPass = validate.control(control[self$PATH], control[self$NAME], control[self$TYPE])
targetsPass = validate.targets(targets[self$PATH], targets[self$NAME], targets[self$TYPE])
if(probePass && controlPass && targetsPass){
return (TRUE)
}
return(FALSE)
},
validate.probe = function(filepath, filename, filetype){
if (filetype != "text/plain"){
return (FALSE)
}
return(TRUE)
},
validate.control = function(filepath, filename, filetype){
if(filetype != "text/plain"){
return (FALSE)
}
return(TRUE)
},
validate.targets = function(filepath, filename, filetype){
if (filetype != "text/plain"){
return (FALSE)
}
if (!("targets" %in% tolower(filename))){
return (FALSE)
}
return(TRUE)
}
)
)
Validator = R6Class("Validator",
public = list(
validated = FALSE,
PATH = 0,
NAME = 1,
TYPE = 2,
initialize = function(probe, control, target){
probeList   = validate.packer(probe)
controlList = validate.packer(control)
targetList  = validate.packer(target)
acceptableData = validate.delegator(probeList, controlList, targetList)
if (acceptableData){
self$validated = True
}
},
isValid = function(){
return (self$validated)
},
validate.packer = function(uploaded){
toValidate = list(uploaded$datapath)
toValidate = list(toValidate, uploaded$name)
toValidate = list(toValidate, uploaded$type)
return (toValidate)
},
validate.delgator = function(probe, control, targets){
probePass   = validate.probe(probe[self$PATH], probe[self$NAME], probe[self$TYPE])
controlPass = validate.control(control[self$PATH], control[self$NAME], control[self$TYPE])
targetsPass = validate.targets(targets[self$PATH], targets[self$NAME], targets[self$TYPE])
if(probePass && controlPass && targetsPass){
return (TRUE)
}
return(FALSE)
},
validate.probe = function(filepath, filename, filetype){
if (filetype != "text/plain"){
return (FALSE)
}
return(TRUE)
},
validate.control = function(filepath, filename, filetype){
if(filetype != "text/plain"){
return (FALSE)
}
return(TRUE)
},
validate.targets = function(filepath, filename, filetype){
if (filetype != "text/plain"){
return (FALSE)
}
if (!("targets" %in% tolower(filename))){
return (FALSE)
}
return(TRUE)
}
)
)
library(Limma)
normalizedArray <- R6Class("rawArray",
public = list(
rawData = NULL,
normalizedData = NULL,
method = NULL,
filter_level = NULL,
ratio = NULL,
bgCorrect = NULL,
initialize = function(rawData, method, filter_level, ratio, bgCorrect = FALSE){
self$rawData = rawData
self$ratio = ratio
self$filter_level = filter_level
self$method = method
self$bgCorrect = bgCorrect
},
normalize = function(){
normData = method.parser(self$rawData, self$method)
normData = pdetection.filter(normData, self$filter_level, self$ratio)
self$normalizedData = normData
},
method.parser = function(data, style){
NONE  = 1
VSN   = 2
LOGQ  = 3
LOESS = 4
if (style == NONE){
return(data)
}
else if (style == VSN){
return (normalizeVSN(data))
}
else if (style == LOGQ){
return (neqc(data))
}
else if (style == LOESS){
return (normalizeBetweenArrays(data, method = "cyclicloess", cyclic.method = "fast"))
}
else{
return (-1)
}
},
##TODO: ADD ACTUAL BACKGROUND CORRECTION
background.correct <- function(data){
if (self$bgCorrect){
}
return (data)
},
pdetection.filter <- function(normData, filter_level, ratio){
expressed <- rowSums(normData$other$Detection < filter_level) >= ratio
normData <- normData[expressed,]
return (normData)
}
)
)
library(limma)
normalizedArray <- R6Class("rawArray",
public = list(
rawData = NULL,
normalizedData = NULL,
method = NULL,
filter_level = NULL,
ratio = NULL,
bgCorrect = NULL,
initialize = function(rawData, method, filter_level, ratio, bgCorrect = FALSE){
self$rawData = rawData
self$ratio = ratio
self$filter_level = filter_level
self$method = method
self$bgCorrect = bgCorrect
},
normalize = function(){
normData = method.parser(self$rawData, self$method)
normData = pdetection.filter(normData, self$filter_level, self$ratio)
self$normalizedData = normData
},
method.parser = function(data, style){
NONE  = 1
VSN   = 2
LOGQ  = 3
LOESS = 4
if (style == NONE){
return(data)
}
else if (style == VSN){
return (normalizeVSN(data))
}
else if (style == LOGQ){
return (neqc(data))
}
else if (style == LOESS){
return (normalizeBetweenArrays(data, method = "cyclicloess", cyclic.method = "fast"))
}
else{
return (-1)
}
},
##TODO: ADD ACTUAL BACKGROUND CORRECTION
background.correct = function(data){
if (self$bgCorrect){
}
return (data)
},
pdetection.filter = function(normData, filter_level, ratio){
expressed = rowSums(normData$other$Detection < filter_level) >= ratio
normData = normData[expressed,]
return (normData)
}
)
)
inputSL = R6Class("inputSL",
public = list(
dataValidator = NULL,
dataManager = NULL,
initalize = function(probe, control, target){
self$dataValidator = Validator(probe, control, target)
if (self$isValid()){
self$loadArrayData(probeFile, controlProbeFile)
}
},
isValid = function(){
if (is.null(self$dataValidator)){
return (FAlSE)
}else{
self$dataValidator.isValid()
}
},
loadArrayData = function(probeFile, controlProbeFile, targetFile){
probePath = probeFile$datapath
changeProbePath(probePath)
controlPath = controlFile$datapath
targetPath = targetFile$datapath
probePath = substr(probePath, 1, nchar(probePath)-2)
controlPath = substr(controlPath, 1, nchar(controlPath)-2)
targetPath = substr(targetPath, 1, nchar(targetPath)-2)
self$dataManager = rawArray(probePath, controlPath)
}
)
)
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
INPUT = inputSL$new(probeFile, controlFile, targetFile)
controlFile = probeFile
INPUT = inputSL$new(probeFile, controlFile, targetFile)
targetFile = probeFile
INPUT = inputSL$new(probeFile, controlFile, targetFile)
INPUT = inputSL$new(probeFile, controlFile, targetFile)
INPUT = inputSL$new(probeFile, controlFile, targetFile)
source("objects/datasetValidator.R")
shiny::runApp('Documents/shinyLimma/src')
INPUT = inputSL$new(probeFile, controlFile, targetFile)
inputSL = R6Class("inputSL",
public = list(
dataValidator = NULL,
dataManager = NULL,
initialize = function(probe, control, target){
cat('...initialize goin')
self$dataValidator = Validator(probe, control, target)
if (self$isValid()){
self$loadArrayData(probeFile, controlProbeFile)
}
},
isValid = function(){
if (is.null(self$dataValidator)){
return (FAlSE)
}else{
self$dataValidator.isValid()
}
},
loadArrayData = function(probeFile, controlProbeFile, targetFile){
probePath = probeFile$datapath
changeProbePath(probePath)
controlPath = controlFile$datapath
targetPath = targetFile$datapath
probePath = substr(probePath, 1, nchar(probePath)-2)
controlPath = substr(controlPath, 1, nchar(controlPath)-2)
targetPath = substr(targetPath, 1, nchar(targetPath)-2)
self$dataManager = rawArray$new(probePath, controlPath)
}
)
)
INPUT = inputSL$new(probeFile, controlFile, targetFile)
INPUT = inputSL$new(probeFile, controlFile, targetFile)
inputSL = R6Class("inputSL",
public = list(
dataValidator = NULL,
dataManager = NULL,
initialize = function(probe, control, target){
cat('....initialize goin')
self$dataValidator = Validator$new(probe, control, target)
if (self$isValid()){
self$loadArrayData(probeFile, controlProbeFile)
}
},
isValid = function(){
if (is.null(self$dataValidator)){
return (FAlSE)
}else{
self$dataValidator.isValid()
}
},
loadArrayData = function(probeFile, controlProbeFile, targetFile){
probePath = probeFile$datapath
changeProbePath(probePath)
controlPath = controlFile$datapath
targetPath = targetFile$datapath
probePath = substr(probePath, 1, nchar(probePath)-2)
controlPath = substr(controlPath, 1, nchar(controlPath)-2)
targetPath = substr(targetPath, 1, nchar(targetPath)-2)
self$dataManager = rawArray$new(probePath, controlPath)
}
)
)
INPUT = inputSL$new(probeFile, controlFile, targetFile)
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
validate.packer = function(uploaded){
toValidate = list(uploaded$datapath)
toValidate = list(toValidate, uploaded$name)
toValidate = list(toValidate, uploaded$type)
return (toValidate)
}
validate.delegator = function(probe, control, targets){
probePass   = self$validate.probe(probe[self$PATH], probe[self$NAME], probe[self$TYPE])
controlPass = self$validate.control(control[self$PATH], control[self$NAME], control[self$TYPE])
targetsPass = self$validate.targets(targets[self$PATH], targets[self$NAME], targets[self$TYPE])
if(probePass && controlPass && targetsPass){
return (TRUE)
}
return(FALSE)
}
validate.probe = function(filepath, filename, filetype){
if (filetype != "text/plain"){
return (FALSE)
}
return(TRUE)
}
validate.control = function(filepath, filename, filetype){
if(filetype != "text/plain"){
return (FALSE)
}
return(TRUE)
}
validate.targets = function(filepath, filename, filetype){
if (filetype != "text/plain"){
return (FALSE)
}
if (!("targets" %in% tolower(filename))){
return (FALSE)
}
return(TRUE)
}
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
INPUT = inputSl$new("lol", "wtf", "fuck")
INPUT = inputSL$new("lol", "wtf", "fuck")
INPUT = inputSL$new(probe, control, target)
shiny::runApp('Documents/shinyLimma/src')
?invisible
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
getwd()
source("objects/rawArray.R")
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
1 = list()
lol = list(1)
lol = list(2, lol)
lol = list(3, lol)
lol[]
lol[0]
lol[[0]]
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
View(boxplotBuilder)
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
View(changeValidGroups)
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
View(densityPlotter)
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
ls()
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
shiny::runApp('Documents/shinyLimma/src')
